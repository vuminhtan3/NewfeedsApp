//
//  NewfeedsAppTests-NewfeedsAppMocks.generated.swift
//  NewfeedsApp
//
//  Generated by Mockingbird v0.20.0.
//  DO NOT EDIT
//

@testable import Mockingbird
@testable import NewfeedsApp
import Alamofire
import Foundation
import Swift
import UIKit

private let mkbGenericStaticMockContext = Mockingbird.GenericStaticMockContext()

// MARK: - Mocked LoginDisplay
public final class LoginDisplayMock: NewfeedsApp.LoginDisplay, Mockingbird.Mock {
  typealias MockingbirdSupertype = NewfeedsApp.LoginDisplay
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "NewfeedsApp"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    LoginDisplayMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `validateFailure`(`message`: String)
  public func `validateFailure`(`message`: String) -> Void {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`validateFailure`(`message`: String) -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`message`)], returnType: Swift.ObjectIdentifier((Void).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (String) -> Void { return mkbImpl(`message`) }
      if let mkbImpl = mkbImpl as? () -> Void { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Void = mkbObject.`validateFailure`(message: `message`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Void).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `validateFailure`(`message`: @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`validateFailure`(`message`: String) -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`message`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }
}

/// Returns a concrete mock of `LoginDisplay`.
public func mock(_ type: NewfeedsApp.LoginDisplay.Protocol, file: StaticString = #file, line: UInt = #line) -> LoginDisplayMock {
  return LoginDisplayMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}
